// -------------Задание 1-------------------

// 1. Пузырьковая сортировка
// 2. Сортировка выбором
// 3. Сортировка вставками
// 4. Сортировка Шелла
// 5. Сортировка подсчётом
// 6. Сортировка расчёской
// 7. Сортировка слиянием
// 8. Пирамидальная сортировка
// 9. Быстрая сортировка
// 10. Сортировка перемешиванием
// 11. Гномья сортировка
// 12. Естественная сортировка строк
// 13. Сортировка кучей
// 14. Сортировка ведра
// 15. Сортировка по основанию

// -------------Задание 2-------------------

// Операторы - это символы языка, выполняющие различные операции с данными. Операторы могут записываться с помощью символов пунктуации или ключевых слов.

// Виды операторов:
// - Арифметические операторы (Используются для выполнения математических операций)
// - Операторы присваивания (Используются для присвоения значения переменной)
// - Операторы сравнения (Используются для сравнения значений, результатом является true или false)
// - Логические операторы (Позволяют объединять логические значения (true/false) и получать новые логические значения в результате выполнения операций)
// - Битовые операторы (Позволяют работать с числами на уровне их двоичного представления, а не десятичного)
// - Оператор запятая (Используется для перечисления выражений и выполнения их последовательно слева направо)
// - Унарные операторы (Применяется к одному операнду и выполняет определенное действие с ним)

// Типы операторов:
// Унарный - в операции участвует один операнд
// Бинарный - в операции учатсвуют два операнда
// Тернарный - комбинирует три операнда

// Выражения - представляют собой комбинации операндов и операторов.
// Операции в выражениях выполняются последовательно в соответствии со значением приоритета.(Чем больше значение приоритета, тем он выше)
// Возвращаемый результат не всегда имеет значение того же типа, что и тип обрабатываемых данных.

// Операнды - это данные, обрабатываемые сценарием JavaScript. В качестве операндов могут быть как простые типы данных, так и сложные, а также другие выражения.

// -------------------------------------------------------------------------------------------------------------------------------------------------------------

// Циклы - обеспечивают многократное выполнение повторяющихся вычислений. Они оптимизируют процесс написания кода, выполняя одну и ту же инструкцию или блок инструкций,
// образующих тело цикла, заданное число раз(используя переменную счетчик) или пока заданное условие истинно. Циклы выполняют обход последовательности значений.
// Однократное выполнение цикла называется итерацией. На производительность цикла влияют количество итераций и количество операций, выполняемых в теле цикла каждой итерации.

// Виды операторов цикла:
// for (Используется, когда вы заранее знаете, сколько раз вам нужно что-то сделать)
// for in (Используется для обхода свойств объектов)
// while (Используется, когда вы не знаете, сколько раз вам нужно что-то сделать)
// do while (Отличается тем, что всегда выполняет выражение в фигурных скобках, по крайней мере один, даже если проверка условия возвращает false)

// -------------Задание 3-------------------

const Person = {
	hello: function () {
		console.log('Hello');
	},
};
const Person2 = Object.create(Person);
Person2.hello();
const Person3 = new Object();

Object.prototype.logInfo = function () {
	console.log('Vladimir');
};

Person.logInfo();
Person2.logInfo();
Person3.logInfo();

// -------------Задание 4-------------------

class PersonThree {
	name;
	constructor(name) {
		this.name = name;
	}

	get name() {
		return this.name;
	}

	set name(value) {
		this.name = value;
	}
}

class PersonInfo extends PersonThree {
	constructor(name) {
		super(name);
	}
}

// ----------------Бонус---------------------

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
total = 13;
result = [];

const firstSum = (arr, total) => {
	for (let i = 0; i < arr.length; i++) {
		for (let j = i + 1; j < arr.length; j++) {
			if (arr[i] + arr[j] === total) {
				result.push(arr[i], arr[j]);
				return;
			}
		}
	}
};

firstSum(arr, total);
console.log('result', result); // [4, 9]

// O(n^2) Квадратичная сложность, потому что код имеет два вложенных цикла
