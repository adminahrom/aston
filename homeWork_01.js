// -------------Задание 1-------------------

// Метод OPTIONS используется для описания параметров соединения с сервером.

// С помощью OPTIONS отправляется предварительный запрос (Preflight Request) на сервер по механизму CORS. Этот запрос спрашивает сервер, может ли он принять наши заголовки и метод.

// Передает:
// Origin (домен с которого идет запрос)
// Access-Control-Request-Method (указывает HTTP - метод, который клиент намеревается использовать в фактическом запросе),
// Access-Control-Request-Headers (перечисляет пользовательские заголовки, которые клиент планирует включить в запрос).

// Принимает:
// Access-Control-Allow-Origin (допустимые домены),
// Access-Control-Allow-Methods (допустимые методы),
// Access-Control-Allow-Headers (допустимые заголовки).

// -------------Задание 2-------------------

// Преимущества HTTP/3:
// 1. Меньшее время задержки при обращении к сайту или веб-приложению.
// 2. QUIC улучшает возможности обработки ошибок.
// 3. Сжатие запросов и заголовков QPACK вместо HPACK.
// (Сжимает специальным алгоритмом, который позволяет не отправлять повторяющиеся части заголовка, заменяя их указателями на уже полученные ранее сервером такие же части. )
// 4. Одноступенчатая проброска сигнала через QUIC вместо многоступенчатой TLS + TCP/IP. Плюс при разрыве соединения не нужно устанавливать новое, так как используется уникальный
//  идентификатор соединения.
// (В HTTP/3, TCP-соединения заменены на протокол QUIC. Он пробрасывает все данные в один шаг, автоматически шифруя весь пакет.)
// 5. В HTTP/2 механизм контроля перегрузки на основе TCP. В HTTP/3 механизм котроля перегрузки на основе QUIC.

// -------------Задание 3-------------------

// 1. До появления fetch использовался XMLHttpRequest, у него использовался метод abort(). Достаточно сохранить ссылку на экземпляр реквеста и в нужное время вызвать метод.
// 2. Второй способ отмены запроса это Axios. В нем для закрытия промиса мы можем передать параметр cancelToken.
// 3. AbortController - используется для отмены асинхронных задач.
// Шаг 1 - Создаем контроллер let controller = new AbortController().
// Шаг 2 - Передаем свойство signal опцией в метод fetch.
// fetch(url, {
//      signal: controller.signal
// })
// Шаг 3 - Чтобы прервать выполнение fetch, вызываем метод controller.abort().

// -------------Задание 4-------------------

// 1. string

// let favoriteDrink = 'Coffee'
// let job = `frontend developer`

// 2. number

// const numberOfCups = 2
// let salary = Number('3000')

// 3. boolean

// const isColdDrink = false
// let isBetterJob = Boolean('true')

// 4. null

// const problems = null

// 5. undefined

// let carOwner = undefined
// let numberOfCars

// 6. symbol

// const id = Symbol('id')

// 7. bigint

// const bigIntNumber = BigInt(100)
// let bigNumber = 10n

// 8. object

// const drink = {
// 	favoriteDrink: 'Coffee',
// 	numberOfCups: 2,
// 	isColdDrink: false,
// }

// -------------Задание 5-------------------

// Потому что они попадют в мертвую зону - это промежуток времени между инициализацией переменной и присвоении ей значения.

// -------------Задание 6-------------------

// const res = 'B' + 'a' + (1 - 'hello');
// console.log(res);
// Результат BaNaN, потому что 1 - 'hello' = NaN, далее конкатенация с помощью +.

// const res2 = (true && 3) + 'd';
// console.log(res2);
// Результат 3d, потому что логический оператор И возвращает последнее истинное значение, если они все истинны, далее конкатенация с помощью +.

// const res3 = Boolean(true && 3) + "d";
// console.log(res3);
// Результат trued, потому что происходит явное приведение к boolean значению, возвращается true и происходит конкатенация с помощью +.
